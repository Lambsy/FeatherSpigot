From f0e8fd68bfd366bfa9748608b56cd2d95fed9fa4 Mon Sep 17 00:00:00 2001
From: galacticwarrior9 <9055352+galacticwarrior9@users.noreply.github.com>
Date: Sun, 9 Feb 2020 12:38:35 +0000
Subject: [PATCH] Optimize DataWatcher


diff --git a/src/main/java/net/minecraft/server/DataWatcher.java b/src/main/java/net/minecraft/server/DataWatcher.java
index 51a02ed..521413f 100644
--- a/src/main/java/net/minecraft/server/DataWatcher.java
+++ b/src/main/java/net/minecraft/server/DataWatcher.java
@@ -88,29 +88,14 @@ public class DataWatcher {
     private <T> void registerObject(DataWatcherObject<T> datawatcherobject, T t0) {
         DataWatcher.Item<T> datawatcher_item = new DataWatcher.Item<>(datawatcherobject, t0);
 
-        this.e.writeLock().lock();
+        //this.e.writeLock().lock(); // Paper - not required
         this.d.put(datawatcherobject.a(), datawatcher_item);
         this.f = false;
-        this.e.writeLock().unlock();
+        //this.e.writeLock().unlock(); // Paper - not required
     }
 
     private <T> DataWatcher.Item<T> b(DataWatcherObject<T> datawatcherobject) {
-        this.e.readLock().lock();
-
-        DataWatcher.Item datawatcher_item;
-
-        try {
-            datawatcher_item = (DataWatcher.Item) this.d.get(datawatcherobject.a());
-        } catch (Throwable throwable) {
-            CrashReport crashreport = CrashReport.a(throwable, "Getting synched entity data");
-            CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Synched entity data");
-
-            crashreportsystemdetails.a("Data ID", (Object) datawatcherobject);
-            throw new ReportedException(crashreport);
-        }
-
-        this.e.readLock().unlock();
-        return datawatcher_item;
+        return (DataWatcher.Item<T>)this.d.get(datawatcherobject.a()); // Paper - avoid lock and try catch, get() does not fail
     }
 
     public <T> T get(DataWatcherObject<T> datawatcherobject) {
@@ -157,7 +142,7 @@ public class DataWatcher {
         List<DataWatcher.Item<?>> list = null;
 
         if (this.g) {
-            this.e.readLock().lock();
+            //this.e.readLock().lock(); // Paper - not required
             Iterator iterator = this.d.values().iterator();
 
             while (iterator.hasNext()) {
@@ -173,7 +158,7 @@ public class DataWatcher {
                 }
             }
 
-            this.e.readLock().unlock();
+            //this.e.readLock().unlock(); // Paper - not required
         }
 
         this.g = false;
@@ -181,7 +166,7 @@ public class DataWatcher {
     }
 
     public void a(PacketDataSerializer packetdataserializer) throws IOException {
-        this.e.readLock().lock();
+        //this.e.readLock().lock(); // Paper - not required
         Iterator iterator = this.d.values().iterator();
 
         while (iterator.hasNext()) {
@@ -190,7 +175,7 @@ public class DataWatcher {
             a(packetdataserializer, datawatcher_item);
         }
 
-        this.e.readLock().unlock();
+        //this.e.readLock().unlock(); // Paper - not required
         packetdataserializer.writeByte(255);
     }
 
@@ -198,7 +183,7 @@ public class DataWatcher {
     public List<DataWatcher.Item<?>> c() {
         List<DataWatcher.Item<?>> list = null;
 
-        this.e.readLock().lock();
+        //this.e.readLock().lock(); // Paper - not required
 
         DataWatcher.Item datawatcher_item;
 
@@ -209,7 +194,7 @@ public class DataWatcher {
             }
         }
 
-        this.e.readLock().unlock();
+        //this.e.readLock().unlock(); // Paper - not required
         return list;
     }
 
@@ -260,7 +245,7 @@ public class DataWatcher {
 
     public void e() {
         this.g = false;
-        this.e.readLock().lock();
+        //this.e.readLock().lock(); // Paper - not required
         Iterator iterator = this.d.values().iterator();
 
         while (iterator.hasNext()) {
@@ -269,7 +254,7 @@ public class DataWatcher {
             datawatcher_item.a(false);
         }
 
-        this.e.readLock().unlock();
+        //this.e.readLock().unlock(); // Paper - not required
     }
 
     public static class Item<T> {
-- 
2.8.1.windows.1

